diff --git a/android/src/main/java/expo/modules/localauthentication/LocalAuthenticationModule.kt b/android/src/main/java/expo/modules/localauthentication/LocalAuthenticationModule.kt
index 9980dfabbd5179753ba99f50c6ecfadd732cfdb9..648ddbf933eb789f2920354b4116b64292f1d2b9 100644
--- a/android/src/main/java/expo/modules/localauthentication/LocalAuthenticationModule.kt
+++ b/android/src/main/java/expo/modules/localauthentication/LocalAuthenticationModule.kt
@@ -7,6 +7,7 @@ import android.content.Context
 import android.content.Intent
 import android.os.Build
 import android.os.Bundle
+import android.provider.Settings
 import androidx.biometric.BiometricManager
 import androidx.biometric.BiometricPrompt
 import androidx.biometric.BiometricPrompt.PromptInfo
@@ -89,7 +90,7 @@ class LocalAuthenticationModule(context: Context) : ExportedModule(context), Act
 
   @ExpoMethod
   fun supportedAuthenticationTypesAsync(promise: Promise) {
-    val result = biometricManager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_WEAK)
+    val result = biometricManager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_STRONG)
     val results: MutableList<Int> = ArrayList()
     if (result == BiometricManager.BIOMETRIC_ERROR_NO_HARDWARE) {
       promise.resolve(results)
@@ -122,13 +123,13 @@ class LocalAuthenticationModule(context: Context) : ExportedModule(context), Act
 
   @ExpoMethod
   fun hasHardwareAsync(promise: Promise) {
-    val result = biometricManager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_WEAK)
+    val result = biometricManager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_STRONG)
     promise.resolve(result != BiometricManager.BIOMETRIC_ERROR_NO_HARDWARE)
   }
 
   @ExpoMethod
   fun isEnrolledAsync(promise: Promise) {
-    val result = biometricManager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_WEAK)
+    val result = biometricManager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_STRONG)
     promise.resolve(result == BiometricManager.BIOMETRIC_SUCCESS)
   }
 
@@ -138,13 +139,31 @@ class LocalAuthenticationModule(context: Context) : ExportedModule(context), Act
     if (isDeviceSecure) {
       level = SECURITY_LEVEL_SECRET
     }
-    val result = biometricManager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_WEAK)
+    val result = biometricManager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_STRONG)
     if (result == BiometricManager.BIOMETRIC_SUCCESS) {
       level = SECURITY_LEVEL_BIOMETRIC
     }
     promise.resolve(level)
   }
 
+  @ExpoMethod
+  fun enrollForAuthentication(promise: Promise) {
+    if (Build.VERSION.SDK_INT >= 30) {
+      val intent = Intent(Settings.ACTION_BIOMETRIC_ENROLL)
+      intent.putExtra(
+        Settings.EXTRA_BIOMETRIC_AUTHENTICATORS_ALLOWED,
+        BiometricManager.Authenticators.BIOMETRIC_STRONG
+      )
+      intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
+      currentActivity!!.startActivity(intent)
+      promise.resolve(true)
+    } else {
+      val intent = Intent(Settings.ACTION_FINGERPRINT_ENROLL)
+      currentActivity!!.startActivity(intent)
+      promise.resolve(true)
+    }
+  }
+
   @ExpoMethod
   fun authenticateAsync(options: Map<String?, Any?>, promise: Promise) {
     if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
@@ -215,15 +234,15 @@ class LocalAuthenticationModule(context: Context) : ExportedModule(context), Act
         promptMessage?.let {
           promptInfoBuilder.setTitle(it)
         }
-        if (disableDeviceFallback == true) {
-          cancelLabel?.let {
-            promptInfoBuilder.setNegativeButtonText(it)
-          }
-        } else {
+        if (Build.VERSION.SDK_INT >= 30) {
           promptInfoBuilder.setAllowedAuthenticators(
-            BiometricManager.Authenticators.BIOMETRIC_WEAK
+            BiometricManager.Authenticators.BIOMETRIC_STRONG
               or BiometricManager.Authenticators.DEVICE_CREDENTIAL
           )
+        } else {
+          promptInfoBuilder.setAllowedAuthenticators(
+            BiometricManager.Authenticators.BIOMETRIC_STRONG
+          )
         }
         promptInfoBuilder.setConfirmationRequired(requireConfirmation)
         val promptInfo = promptInfoBuilder.build()
