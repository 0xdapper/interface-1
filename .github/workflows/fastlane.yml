name: Fastlane deploy iOS
# referenced from https://github.com/invertase/react-native-firebase/blob/master/.github/workflows/tests_e2e_ios.yml

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * 1,2,3,4,5' # run at 2 AM UTC MWF

jobs:
  ios:
    name: iOS
    runs-on: macos-latest
    # TODO matrix across APIs, at least 11 and 15 (lowest to highest)
    timeout-minutes: 60
    steps:
      - uses: styfle/cancel-workflow-action@0.9.1
        with:
          all_but_latest: true

      # Set up tool versions
      - uses: actions/setup-node@v2
        with:
          node-version: 16

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Set path variables needed for caches
      - name: Set workflow variables
        id: workflow-variables
        run: |
          echo "::set-output name=xcode-version::$(xcodebuild -version|tail -1|cut -f3 -d' ')"
          echo "::set-output name=yarn-cache-dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        name: Yarn Cache
        id: yarn-cache
        with:
          path: ${{ steps.workflow-variables.outputs.yarn-cache-dir }}
          key: ${{ runner.os }}-yarn-v1-${{ hashFiles('**/package.json') }}
          restore-keys: ${{ runner.os }}-yarn-v1

      # Detox is compiled during yarn install, using Xcode, set up cache first
      - uses: hendrikmuhs/ccache-action@v1
        name: Xcode Compile Cache
        with:
          key: ${{ runner.os }}-v2 # makes a unique key w/related restore key internally
          max-size: 400M

      - name: Yarn Install
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          retry_wait_seconds: 2
          max_attempts: 3
          command: yarn

      - name: Update Ruby build tools
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 2
          retry_wait_seconds: 2
          max_attempts: 3
          command: gem update cocoapods xcodeproj

      - uses: actions/cache@v2
        name: Cache Pods
        id: pods-cache
        with:
          path: tests/ios/Pods
          key: ${{ runner.os }}-pods-v2-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: ${{ runner.os }}-pods-v2

      - name: Pod Install
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 20
          retry_wait_seconds: 2
          max_attempts: 3
          command: cd ios && pod install && cd ..

      - name: Build and ship iOS App
        run: |
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          export CCACHE_SLOPPINESS=clang_index_store,file_stat_matches,include_file_ctime,include_file_mtime,ivfsoverlay,pch_defines,modules,system_headers,time_macros
          export CCACHE_FILECLONE=true
          export CCACHE_DEPEND=true
          export CCACHE_INODECACHE=true
          ccache -s
          set -o pipefail
          yarn deploy:ios:alpha
          ccache -s
        shell: bash
        env:
          APP_IDENTIFIER: ${{ secrets.APP_IDENTIFIER }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          URL_TO_FASTLANE_CERTIFICATES_REPO: ${{ secrets.URL_TO_FASTLANE_CERTIFICATES_REPO }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          CI: true
          CI_KEYCHAIN_NAME: 'CI_KEYCHAIN'
          CI_KEYCHAIN_PASSWORD: ${{ secrets.CI_KEYCHAIN_PASSWORD }}
          GIT_BRANCH_NAME: ${{ github.ref }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate iOS bundle and sourcemaps
        run: |
          yarn react-native bundle --platform ios --dev false --entry-file index.js --bundle-output main.jsbundle --sourcemap-output main.jsbundle.map

      - name: Create Sentry release with sourcemaps
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        run: |
          # Install Sentry CLI
          curl -sL https://sentry.io/get-cli/ | bash

          # Create new Sentry release
          export SENTRY_RELEASE="com.uniswap.mobile.dev@$IOS_VERSION_NUMBER+$IOS_BUILD_NUMBER"
          sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE --log-level=info
          sentry-cli releases set-commits --auto $SENTRY_RELEASE --log-level=info

          #Upload sourcemaps
          sentry-cli releases files $SENTRY_RELEASE upload-sourcemaps main.jsbundle.map --dist $IOS_BUILD_NUMBER --log-level=info
          sentry-cli releases files $SENTRY_RELEASE upload main.jsbundle '~/main.jsbundle' --dist $IOS_BUILD_NUMBER --log-level=info

          sentry-cli releases finalize $SENTRY_RELEASE --log-level=info

          # Create new deploy for this Sentry release
          sentry-cli releases deploys $SENTRY_RELEASE new -e production

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
