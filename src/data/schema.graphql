"""This directive allows results to be deferred during execution"""
directive @defer on FIELD

"""Tells the service which mutation triggers this subscription."""
directive @aws_subscribe(
  """
  List of mutations which will trigger this subscription when they are called.
  """
  mutations: [String]
) on FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by an OIDC token.
"""
directive @aws_oidc on OBJECT | FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by a Cognito User Pools token.
"""
directive @aws_cognito_user_pools(
  """List of cognito user pool groups which have access on this field"""
  cognito_groups: [String]
) on OBJECT | FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by sigv4 signing.
"""
directive @aws_iam on OBJECT | FIELD_DEFINITION

"""
Tells the service which subscriptions will be published to when this mutation is
called. This directive is deprecated use @aws_susbscribe directive instead.
"""
directive @aws_publish(
  """
  List of subscriptions which will be published to when this mutation is called.
  """
  subscriptions: [String]
) on FIELD_DEFINITION

"""Directs the schema to enforce authorization on a field"""
directive @aws_auth(
  """List of cognito user pool groups which have access on this field"""
  cognito_groups: [String]
) on FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by a Lambda Authorizer.
"""
directive @aws_lambda on OBJECT | FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by an API key.
"""
directive @aws_api_key on OBJECT | FIELD_DEFINITION

enum Chain {
  ARBITRUM
  ETHEREUM
  ETHEREUM_RINKEBY
  OPTIMISM
  POLYGON
}

enum HistoricalPricingInterval {
  DAILY
  HOURLY
}

type Market {
  id: ID!
  imageUrl: String
  marketCap: Float
  marketCapChange24H: Float
  marketCapRank: Int
  name: String
  priceLow24H: Float
  priceChange24H: Float
  priceHigh24H: Float
  priceUSD: Float
  symbol: String
  totalSupply: Float
}

enum MarketSortableField {
  id
  marketCap
}

type Portfolio {
  id: ID!
  ownerAddress: String!
  assetsValueUSD: Float
  totalValueUSD: Float
  absoluteChange24H: Float
  relativeChange24H: Float
}

type PortfolioChartDataPoint {
  id: ID!
  timestamp: Int!
  value: Float!
}

enum PortfolioChartDuration {
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
}

type Query {
  markets(asc: Boolean, orderBy: MarketSortableField, page: Int, pageSize: Int): [Market]
  searchTokens(searchQuery: String!): [Token]
  transactions(address: String!, page: Int, pageSize: Int): [Transaction]
  tokenBalances(ownerAddress: String!): [TokenBalance]
  portfolio(ownerAddress: String!): Portfolio
  portfolioChart(ownerAddress: String!, duration: PortfolioChartDuration): [PortfolioChartDataPoint]
}

type Token {
  id: ID!
  chain: Chain!
  address: String
  decimals: Int
  logoURI: String
  name: String!
  symbol: String!
}

type TokenBalance {
  id: ID!
  balance: Float
  balanceUSD: Float
  ownerAddress: String!
  token: Token
  priceUSD: Float
  priceChange24H: Float
}

type Transaction {
  id: ID!
  blockNumber: Int!
  contract: String
  from: String!
  hash: String!
  nonce: Int!
  status: TransactionStatus!
  timestamp: Int!
  to: String!
  type: TransactionType
  feeValue: Float
  feePrice: Float
  directon: TransactionDirection
}

enum TransactionDirection {
  IN
  OUT
  SELF
}

enum TransactionStatus {
  FAILED
  CONFIRMED
  PENDING
}

enum TransactionType {
  AUTHORIZE
  BORROW
  CANCEL
  CLAIM
  DEPLOYMENT
  DEPOSIT
  EXECUTION
  RECEIVE
  REPAY
  SEND
  STAKE
  TRADE
  UNSTAKE
  WITHDRAW
}

