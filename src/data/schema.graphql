"""This directive allows results to be deferred during execution"""
directive @defer on FIELD

"""Directs the schema to enforce authorization on a field"""
directive @aws_auth(
  """List of cognito user pool groups which have access on this field"""
  cognito_groups: [String]
) on FIELD_DEFINITION

"""
Tells the service which subscriptions will be published to when this mutation is
called. This directive is deprecated use @aws_susbscribe directive instead.
"""
directive @aws_publish(
  """
  List of subscriptions which will be published to when this mutation is called.
  """
  subscriptions: [String]
) on FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by sigv4 signing.
"""
directive @aws_iam on OBJECT | FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by a Lambda Authorizer.
"""
directive @aws_lambda on OBJECT | FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by an OIDC token.
"""
directive @aws_oidc on OBJECT | FIELD_DEFINITION

"""Tells the service which mutation triggers this subscription."""
directive @aws_subscribe(
  """
  List of mutations which will trigger this subscription when they are called.
  """
  mutations: [String]
) on FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by an API key.
"""
directive @aws_api_key on OBJECT | FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by a Cognito User Pools token.
"""
directive @aws_cognito_user_pools(
  """List of cognito user pool groups which have access on this field"""
  cognito_groups: [String]
) on OBJECT | FIELD_DEFINITION

type Amount implements IAmount {
  id: ID!
  currency: Currency
  value: Float
}

enum Chain {
  ARBITRUM
  ETHEREUM
  ETHEREUM_GOERLI
  OPTIMISM
  POLYGON
}

input ContractInput {
  chain: Chain!
  address: String
}

enum Currency {
  USD
}

enum HistoryDuration {
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
  MAX
}

interface IAmount {
  currency: Currency
  value: Float
}

interface IContract {
  chain: Chain!
  address: String
}

enum MarketSortableField {
  MARKET_CAP
  VOLUME
}

type Portfolio {
  id: ID!
  ownerAddress: String!
  tokensTotalDenominatedValue: Amount
  tokensTotalDenominatedValueHistory(duration: HistoryDuration): [TimestampedAmount]
  tokenBalances: [TokenBalance]
  assetsValueUSD: Float
  totalValueUSD: Float
  assetsValue: Float
  totalValue: Float
  absoluteChange24H: Float
  relativeChange24H: Float
}

type Query {
  tokens(contracts: [ContractInput]): [Token]
  tokenProjects(contracts: [ContractInput]): [TokenProject]
  topTokenProjects(orderBy: MarketSortableField, page: Int, pageSize: Int, currency: Currency): [TokenProject]
  searchTokens(searchQuery: String!): [Token]
  transactions(address: String!, page: Int, pageSize: Int): [Transaction]
  portfolio(ownerAddress: String!): Portfolio
  portfolios(ownerAddresses: [String!]!): [Portfolio]
}

type TimestampedAmount implements IAmount {
  id: ID!
  currency: Currency
  value: Float
  timestamp: Int!
}

type Token implements IContract {
  id: ID!
  chain: Chain!
  address: String
  standard: TokenStandard
  decimals: Int
  name: String
  symbol: String
}

type TokenBalance {
  id: ID!
  quantity: Float
  denominatedValue: Amount
  ownerAddress: String!
  token: Token
  tokenProjectMarket: TokenProjectMarket
}

type TokenProject {
  id: ID!
  name: String
  tokens: [Token]
  description: String
  twitterName: String
  homepageUrl: String
  logoUrl: String
  markets(currencies: [Currency!]!): [TokenProjectMarket]
}

type TokenProjectMarket {
  id: ID!
  price: Amount
  volume24h: Amount
  volume7d: Amount
  volume30d: Amount
  volume1yr: Amount
  pricePercentChange24h: Amount
  pricePercentChange7d: Amount
  pricePercentChange30d: Amount
  pricePercentChange1yr: Amount
  marketCap: Amount
  fullyDilutedMarketCap: Amount
  priceHistory(duration: HistoryDuration): [TimestampedAmount]
}

enum TokenStandard {
  NATIVE
  ERC20
  ERC721
  ERC1155
}

type Transaction {
  id: ID!
  blockNumber: Int!
  contract: String
  from: String!
  hash: String!
  nonce: Int!
  status: TransactionStatus!
  timestamp: Int!
  to: String!
  type: TransactionType
  feeValue: Float
  feePrice: Float
  directon: TransactionDirection
}

enum TransactionDirection {
  IN
  OUT
  SELF
}

enum TransactionStatus {
  FAILED
  CONFIRMED
  PENDING
}

enum TransactionType {
  AUTHORIZE
  BORROW
  CANCEL
  CLAIM
  DEPLOYMENT
  DEPOSIT
  EXECUTION
  RECEIVE
  REPAY
  SEND
  STAKE
  TRADE
  UNSTAKE
  WITHDRAW
}

