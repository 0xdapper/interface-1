opt_out_usage

# Global variables to simplify the individual adjustment
PROJECT_NAME = "Uniswap"
ONE_SIGNAL_TARGET_NAME = "OneSignalNotificationServiceExtension"
XCODE_PROJECT = "./ios/#{PROJECT_NAME}.xcodeproj"
XCODE_WORKSPACE = "./ios/#{PROJECT_NAME}.xcworkspace"
OUTPUT_DIRECTORY = "./fastlane/builds/"
BUILD_FOR_DEVELOPMENT_ONLY = false # true = Build for Development | false = Build to create a release
BUILD_ONLY = false

platform :ios do
  before_all do
  end

  private_lane :certificates do | options |
    match_type = options[:match_type]

    if options[:ci]
      create_keychain(
        name: ENV["CI_KEYCHAIN_NAME"],
        password: ENV["CI_KEYCHAIN_PASSWORD"],
        default_keychain: true,
        unlock: true,
        timeout: 3600,
        lock_when_sleeps: false
      )
      match(
        type: match_type,
        keychain_name: ENV["CI_KEYCHAIN_NAME"],
        keychain_password: ENV["CI_KEYCHAIN_PASSWORD"],
        readonly: true,
        shallow_clone: true,
        verbose: false,
        clone_branch_directly: true,
      )
    else
      match(
        type: match_type,
        readonly: true,
        shallow_clone: true,
        verbose: false,
        clone_branch_directly: true,
      )
    end

  end

  lane :update_build_numbers_for_configuration do |option|
        
    fastlane_require 'Xcodeproj'
    
    buildConfiguration = option[:buildConfiguration] || 'Release'
    CUSTOM_BUILD_NUMBER = ''
    
    project = Xcodeproj::Project.open("../" + XCODE_PROJECT)
    project.targets.each do |mtarget|
        if mtarget.name == PROJECT_NAME || mtarget.name == ONE_SIGNAL_TARGET_NAME
            mtarget.build_configurations.each do |mbuild|
                if mbuild.name == buildConfiguration
                    CUSTOM_BUILD_NUMBER = mbuild.build_settings['CURRENT_PROJECT_VERSION']
                    mbuild.build_settings['CURRENT_PROJECT_VERSION'] = CUSTOM_BUILD_NUMBER.to_i + 1
                end
            end
        end
    end
    project.save()
    CUSTOM_BUILD_NUMBER.to_i + 1
end

  lane :build do | options |
    build_for_development_only = options[:build_for_development_only]
    configuration_name = build_for_development_only ? "Development" : "Release"
    export_options_method = build_for_development_only ? "development" : "app-store"
    match_type = build_for_development_only ? "development" : "appstore"

    certificates(
      ci: options[:running_on_ci],
      match_type: match_type,
    )

    sh("cd ../fastlane") # yarn and pod install should be done by previous step of github actions

    build_app(
      scheme: PROJECT_NAME,
      workspace: XCODE_WORKSPACE,
      silent: true,
      clean: true,
      configuration: configuration_name,
      output_directory: OUTPUT_DIRECTORY,
      output_name: "#{PROJECT_NAME}.ipa",
      export_options: {
        method: export_options_method,
      },
    )

    match_type
  end

  private_lane :ship do | options |
    pilot(
      ipa: "#{OUTPUT_DIRECTORY}#{PROJECT_NAME}.ipa",
      skip_waiting_for_build_processing: true,
      verbose: false,
      uses_non_exempt_encryption: true,
      notify_external_testers: false,
      username: options[:apple_id],
      team_id: options[:apple_team_id],
      apple_id: options[:apple_app_id],
      itc_provider: ENV["sigh_#{options[:app_identifier]}_#{options[:match_type]}_team-id"],
    )
  end

  lane :buildAndShip do
    running_on_ci = ENV["CI"] || false
    options = {
      :build_for_development_only => BUILD_FOR_DEVELOPMENT_ONLY,
      :running_on_ci => running_on_ci,
      :git_branch_name => running_on_ci ? "#{ENV['GIT_BRANCH_NAME']}"  : sh("git", "rev-parse", "--abbrev-ref", "HEAD", log: false),
      :app_identifier => ENV["APP_IDENTIFIER"],
      :apple_id => ENV["APPLE_ID"],
      :apple_team_id => ENV["APPLE_TEAM_ID"],
      :apple_app_id => ENV["APPLE_APP_ID"],
      :token => ENV["GITHUB_TOKEN"],
    }

    build_number= update_build_numbers_for_configuration()

    version_number = get_version_number(
      xcodeproj: XCODE_PROJECT,
      target: PROJECT_NAME
    )

    # Setting env variables to be used in the next step of the workflow
    sh "echo IOS_BUILD_NUMBER=#{build_number} >> $GITHUB_ENV"
    sh "echo IOS_VERSION_NUMBER=#{version_number} >> $GITHUB_ENV"

    match_type = build(options)

    commit_version_bump(
      xcodeproj: XCODE_PROJECT,
      force: true
    )

    unless BUILD_ONLY
      ship(
        apple_id: options[:apple_id],
        apple_team_id: options[:apple_team_id],
        apple_app_id: options[:apple_app_id],
        app_identifier: options[:app_identifier],
        match_type: match_type,
      )
    end
  end
end
